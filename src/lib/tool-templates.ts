import type { ToolTemplate } from '@/types/server-builder';

export const toolTemplates: ToolTemplate[] = [
  // üìù Accept Form Data (6 templates)
  {
    id: 'contact-form',
    name: 'Contact Form',
    category: 'forms',
    description: 'Collect contact information from users',
    userEnters: 'Name, email, and message',
    userSees: 'Confirmation that their message was received',
    tool: {
      id: 'submit_contact',
      name: 'submit_contact',
      description: 'Process contact form submission',
      category: 'forms',
      parameters: [
        { name: 'name', type: 'string', description: 'Contact name', required: true },
        { name: 'email', type: 'string', description: 'Contact email', required: true },
        { name: 'message', type: 'string', description: 'Contact message', required: true },
      ],
      returnType: 'object',
      returnDescription: 'Confirmation with submission ID',
      exampleInput: { name: 'John Doe', email: 'john@example.com', message: 'Hello!' },
      exampleOutput: { success: true, id: '12345', message: 'Message received' },
    },
  },
  {
    id: 'sign-up-form',
    name: 'Sign Up Form',
    category: 'forms',
    description: 'User registration with account creation',
    userEnters: 'Username, email, password',
    userSees: 'Welcome message and account details',
    tool: {
      id: 'create_account',
      name: 'create_account',
      description: 'Create new user account',
      category: 'forms',
      parameters: [
        { name: 'username', type: 'string', description: 'Desired username', required: true },
        { name: 'email', type: 'string', description: 'Email address', required: true },
        { name: 'password', type: 'string', description: 'Account password', required: true },
      ],
      returnType: 'object',
      returnDescription: 'New account details',
      exampleInput: { username: 'johndoe', email: 'john@example.com', password: 'secret' },
      exampleOutput: { success: true, userId: 'user_123', username: 'johndoe' },
    },
  },
  {
    id: 'feedback-form',
    name: 'Feedback Form',
    category: 'forms',
    description: 'Collect user feedback and ratings',
    userEnters: 'Rating, comments, and optional contact info',
    userSees: 'Thank you message',
    tool: {
      id: 'submit_feedback',
      name: 'submit_feedback',
      description: 'Process feedback submission',
      category: 'forms',
      parameters: [
        { name: 'rating', type: 'number', description: 'Rating 1-5', required: true },
        { name: 'comments', type: 'string', description: 'Feedback comments', required: true },
        { name: 'email', type: 'string', description: 'Contact email', required: false },
      ],
      returnType: 'object',
      returnDescription: 'Submission confirmation',
      exampleInput: { rating: 5, comments: 'Great service!', email: 'john@example.com' },
      exampleOutput: { success: true, feedbackId: 'fb_789' },
    },
  },
  {
    id: 'settings-form',
    name: 'Settings Form',
    category: 'forms',
    description: 'Update user preferences and settings',
    userEnters: 'Notification preferences, theme, language',
    userSees: 'Settings saved confirmation',
    tool: {
      id: 'update_settings',
      name: 'update_settings',
      description: 'Update user settings',
      category: 'forms',
      parameters: [
        { name: 'notifications', type: 'boolean', description: 'Enable notifications', required: false },
        { name: 'theme', type: 'string', description: 'UI theme (light/dark)', required: false },
        { name: 'language', type: 'string', description: 'Preferred language', required: false },
      ],
      returnType: 'object',
      returnDescription: 'Updated settings',
      exampleInput: { notifications: true, theme: 'dark', language: 'en' },
      exampleOutput: { success: true, settings: { notifications: true, theme: 'dark', language: 'en' } },
    },
  },
  {
    id: 'survey-form',
    name: 'Survey Form',
    category: 'forms',
    description: 'Multi-question survey collection',
    userEnters: 'Answers to survey questions',
    userSees: 'Survey completion message',
    tool: {
      id: 'submit_survey',
      name: 'submit_survey',
      description: 'Process survey responses',
      category: 'forms',
      parameters: [
        { name: 'surveyId', type: 'string', description: 'Survey identifier', required: true },
        { name: 'responses', type: 'object', description: 'Question answers', required: true },
      ],
      returnType: 'object',
      returnDescription: 'Survey completion status',
      exampleInput: { surveyId: 'survey_1', responses: { q1: 'Yes', q2: 'No' } },
      exampleOutput: { success: true, completionRate: '100%' },
    },
  },
  {
    id: 'booking-form',
    name: 'Booking Form',
    category: 'forms',
    description: 'Schedule appointments or reservations',
    userEnters: 'Date, time, service type',
    userSees: 'Booking confirmation details',
    tool: {
      id: 'create_booking',
      name: 'create_booking',
      description: 'Create new booking',
      category: 'forms',
      parameters: [
        { name: 'date', type: 'string', description: 'Booking date', required: true },
        { name: 'time', type: 'string', description: 'Booking time', required: true },
        { name: 'serviceType', type: 'string', description: 'Type of service', required: true },
      ],
      returnType: 'object',
      returnDescription: 'Booking confirmation',
      exampleInput: { date: '2025-10-15', time: '14:00', serviceType: 'consultation' },
      exampleOutput: { success: true, bookingId: 'book_456', confirmationCode: 'ABC123' },
    },
  },

  // üîç Search & Find (6 templates)
  {
    id: 'simple-search',
    name: 'Simple Search',
    category: 'search',
    description: 'Basic keyword search',
    userEnters: 'Search query',
    userSees: 'List of matching results',
    tool: {
      id: 'search_items',
      name: 'search_items',
      description: 'Search for items by keyword',
      category: 'search',
      parameters: [
        { name: 'query', type: 'string', description: 'Search query', required: true },
        { name: 'limit', type: 'number', description: 'Max results', required: false, default: 10 },
      ],
      returnType: 'array',
      returnDescription: 'List of matching items',
      exampleInput: { query: 'laptop', limit: 5 },
      exampleOutput: [
        { id: 1, name: 'Dell Laptop', price: 899 },
        { id: 2, name: 'HP Laptop', price: 799 },
      ],
    },
  },
  {
    id: 'advanced-search',
    name: 'Advanced Search',
    category: 'search',
    description: 'Search with filters and sorting',
    userEnters: 'Query, filters, sort preferences',
    userSees: 'Filtered and sorted results',
    tool: {
      id: 'advanced_search',
      name: 'advanced_search',
      description: 'Search with advanced filters',
      category: 'search',
      parameters: [
        { name: 'query', type: 'string', description: 'Search query', required: true },
        { name: 'filters', type: 'object', description: 'Filter criteria', required: false },
        { name: 'sortBy', type: 'string', description: 'Sort field', required: false },
      ],
      returnType: 'object',
      returnDescription: 'Search results with metadata',
      exampleInput: { query: 'laptop', filters: { minPrice: 500, maxPrice: 1000 }, sortBy: 'price' },
      exampleOutput: { total: 15, results: [{ id: 1, name: 'Dell Laptop' }] },
    },
  },
  {
    id: 'autocomplete',
    name: 'Auto-Complete',
    category: 'search',
    description: 'Real-time search suggestions',
    userEnters: 'Partial query text',
    userSees: 'Suggested completions',
    tool: {
      id: 'autocomplete',
      name: 'autocomplete',
      description: 'Get search suggestions',
      category: 'search',
      parameters: [
        { name: 'partial', type: 'string', description: 'Partial query', required: true },
        { name: 'maxSuggestions', type: 'number', description: 'Max suggestions', required: false, default: 5 },
      ],
      returnType: 'array',
      returnDescription: 'List of suggestions',
      exampleInput: { partial: 'lap', maxSuggestions: 5 },
      exampleOutput: ['laptop', 'laptop bag', 'laptop stand'],
    },
  },
  {
    id: 'find-by-id',
    name: 'Find by ID',
    category: 'search',
    description: 'Look up item by unique identifier',
    userEnters: 'Item ID or code',
    userSees: 'Complete item details',
    tool: {
      id: 'find_by_id',
      name: 'find_by_id',
      description: 'Find item by ID',
      category: 'search',
      parameters: [
        { name: 'id', type: 'string', description: 'Item identifier', required: true },
      ],
      returnType: 'object',
      returnDescription: 'Item details',
      exampleInput: { id: 'item_123' },
      exampleOutput: { id: 'item_123', name: 'Product Name', price: 49.99 },
    },
  },
  {
    id: 'location-search',
    name: 'Location Search',
    category: 'search',
    description: 'Find nearby places or addresses',
    userEnters: 'Location, radius',
    userSees: 'Nearby locations on map',
    tool: {
      id: 'search_locations',
      name: 'search_locations',
      description: 'Search for nearby locations',
      category: 'search',
      parameters: [
        { name: 'latitude', type: 'number', description: 'Latitude', required: true },
        { name: 'longitude', type: 'number', description: 'Longitude', required: true },
        { name: 'radius', type: 'number', description: 'Search radius in km', required: false, default: 5 },
      ],
      returnType: 'array',
      returnDescription: 'Nearby locations',
      exampleInput: { latitude: 37.7749, longitude: -122.4194, radius: 10 },
      exampleOutput: [{ name: 'Coffee Shop', distance: 2.3, address: '123 Main St' }],
    },
  },
  {
    id: 'faceted-search',
    name: 'Faceted Search',
    category: 'search',
    description: 'Search with category facets',
    userEnters: 'Query and category selections',
    userSees: 'Results grouped by facets',
    tool: {
      id: 'faceted_search',
      name: 'faceted_search',
      description: 'Search with facets',
      category: 'search',
      parameters: [
        { name: 'query', type: 'string', description: 'Search query', required: true },
        { name: 'facets', type: 'array', description: 'Selected facets', required: false },
      ],
      returnType: 'object',
      returnDescription: 'Results with facet counts',
      exampleInput: { query: 'shoes', facets: ['brand:nike', 'size:10'] },
      exampleOutput: { results: [], facets: { brand: { nike: 45, adidas: 32 } } },
    },
  },

  // üíæ Save & Store (6 templates)
  {
    id: 'add-new',
    name: 'Add New Item',
    category: 'save',
    description: 'Create new record or entry',
    userEnters: 'Item details and properties',
    userSees: 'New item confirmation with ID',
    tool: {
      id: 'create_item',
      name: 'create_item',
      description: 'Create new item',
      category: 'save',
      parameters: [
        { name: 'name', type: 'string', description: 'Item name', required: true },
        { name: 'description', type: 'string', description: 'Item description', required: false },
        { name: 'properties', type: 'object', description: 'Additional properties', required: false },
      ],
      returnType: 'object',
      returnDescription: 'Created item with ID',
      exampleInput: { name: 'New Product', description: 'A great product' },
      exampleOutput: { id: 'item_789', name: 'New Product', createdAt: '2025-10-05T10:00:00Z' },
    },
  },
  {
    id: 'edit-item',
    name: 'Edit Existing',
    category: 'save',
    description: 'Update existing record',
    userEnters: 'Item ID and updated fields',
    userSees: 'Update confirmation',
    tool: {
      id: 'update_item',
      name: 'update_item',
      description: 'Update existing item',
      category: 'save',
      parameters: [
        { name: 'id', type: 'string', description: 'Item ID', required: true },
        { name: 'updates', type: 'object', description: 'Fields to update', required: true },
      ],
      returnType: 'object',
      returnDescription: 'Updated item',
      exampleInput: { id: 'item_789', updates: { name: 'Updated Name' } },
      exampleOutput: { id: 'item_789', name: 'Updated Name', updatedAt: '2025-10-05T10:30:00Z' },
    },
  },
  {
    id: 'save-draft',
    name: 'Save Draft',
    category: 'save',
    description: 'Save work in progress',
    userEnters: 'Draft content and metadata',
    userSees: 'Auto-save confirmation',
    tool: {
      id: 'save_draft',
      name: 'save_draft',
      description: 'Save draft for later',
      category: 'save',
      parameters: [
        { name: 'content', type: 'object', description: 'Draft content', required: true },
        { name: 'autoSave', type: 'boolean', description: 'Auto-save enabled', required: false, default: true },
      ],
      returnType: 'object',
      returnDescription: 'Draft save confirmation',
      exampleInput: { content: { title: 'Draft Post', body: 'Content...' }, autoSave: true },
      exampleOutput: { draftId: 'draft_123', savedAt: '2025-10-05T10:45:00Z' },
    },
  },
  {
    id: 'import-data',
    name: 'Import Data',
    category: 'save',
    description: 'Bulk import from file',
    userEnters: 'File data and import options',
    userSees: 'Import progress and summary',
    tool: {
      id: 'import_data',
      name: 'import_data',
      description: 'Import bulk data',
      category: 'save',
      parameters: [
        { name: 'data', type: 'array', description: 'Items to import', required: true },
        { name: 'overwriteExisting', type: 'boolean', description: 'Overwrite existing', required: false, default: false },
      ],
      returnType: 'object',
      returnDescription: 'Import summary',
      exampleInput: { data: [{ name: 'Item 1' }, { name: 'Item 2' }], overwriteExisting: false },
      exampleOutput: { imported: 2, skipped: 0, errors: [] },
    },
  },
  {
    id: 'delete-item',
    name: 'Delete Item',
    category: 'save',
    description: 'Remove record from system',
    userEnters: 'Item ID to delete',
    userSees: 'Deletion confirmation',
    tool: {
      id: 'delete_item',
      name: 'delete_item',
      description: 'Delete item by ID',
      category: 'save',
      parameters: [
        { name: 'id', type: 'string', description: 'Item ID to delete', required: true },
        { name: 'permanent', type: 'boolean', description: 'Permanent deletion', required: false, default: false },
      ],
      returnType: 'object',
      returnDescription: 'Deletion confirmation',
      exampleInput: { id: 'item_789', permanent: true },
      exampleOutput: { success: true, deletedId: 'item_789' },
    },
  },
  {
    id: 'batch-update',
    name: 'Batch Update',
    category: 'save',
    description: 'Update multiple records at once',
    userEnters: 'List of IDs and changes',
    userSees: 'Batch update summary',
    tool: {
      id: 'batch_update',
      name: 'batch_update',
      description: 'Update multiple items',
      category: 'save',
      parameters: [
        { name: 'ids', type: 'array', description: 'Item IDs to update', required: true },
        { name: 'updates', type: 'object', description: 'Changes to apply', required: true },
      ],
      returnType: 'object',
      returnDescription: 'Batch update summary',
      exampleInput: { ids: ['item_1', 'item_2'], updates: { status: 'active' } },
      exampleOutput: { updated: 2, failed: 0 },
    },
  },

  // üìä Show Information (6 templates)
  {
    id: 'user-profile',
    name: 'User Profile',
    category: 'show',
    description: 'Display user account information',
    userEnters: 'User ID or username',
    userSees: 'Profile details and stats',
    tool: {
      id: 'get_profile',
      name: 'get_profile',
      description: 'Get user profile data',
      category: 'show',
      parameters: [
        { name: 'userId', type: 'string', description: 'User identifier', required: true },
      ],
      returnType: 'object',
      returnDescription: 'User profile data',
      exampleInput: { userId: 'user_123' },
      exampleOutput: { id: 'user_123', name: 'John Doe', email: 'john@example.com', joinedAt: '2024-01-01' },
    },
  },
  {
    id: 'dashboard',
    name: 'Dashboard Stats',
    category: 'show',
    description: 'Show key metrics and charts',
    userEnters: 'Date range and metric filters',
    userSees: 'Visual dashboard with graphs',
    tool: {
      id: 'get_dashboard',
      name: 'get_dashboard',
      description: 'Get dashboard metrics',
      category: 'show',
      parameters: [
        { name: 'startDate', type: 'string', description: 'Start date', required: false },
        { name: 'endDate', type: 'string', description: 'End date', required: false },
      ],
      returnType: 'object',
      returnDescription: 'Dashboard data',
      exampleInput: { startDate: '2025-10-01', endDate: '2025-10-05' },
      exampleOutput: { totalUsers: 1250, activeToday: 45, revenue: 15000 },
    },
  },
  {
    id: 'item-list',
    name: 'Item List',
    category: 'show',
    description: 'Display paginated list of items',
    userEnters: 'Page number and filters',
    userSees: 'Table of items with pagination',
    tool: {
      id: 'list_items',
      name: 'list_items',
      description: 'Get paginated item list',
      category: 'show',
      parameters: [
        { name: 'page', type: 'number', description: 'Page number', required: false, default: 1 },
        { name: 'pageSize', type: 'number', description: 'Items per page', required: false, default: 20 },
      ],
      returnType: 'object',
      returnDescription: 'Paginated items',
      exampleInput: { page: 1, pageSize: 10 },
      exampleOutput: { total: 100, page: 1, items: [{ id: 1, name: 'Item 1' }] },
    },
  },
  {
    id: 'status-check',
    name: 'Status Check',
    category: 'show',
    description: 'Check system or service status',
    userEnters: 'Service name or ID',
    userSees: 'Health status and uptime',
    tool: {
      id: 'check_status',
      name: 'check_status',
      description: 'Get service status',
      category: 'show',
      parameters: [
        { name: 'serviceName', type: 'string', description: 'Service to check', required: true },
      ],
      returnType: 'object',
      returnDescription: 'Service status',
      exampleInput: { serviceName: 'api' },
      exampleOutput: { status: 'operational', uptime: '99.9%', lastCheck: '2025-10-05T10:00:00Z' },
    },
  },
  {
    id: 'activity-log',
    name: 'Activity Log',
    category: 'show',
    description: 'Show recent activity history',
    userEnters: 'User ID and time range',
    userSees: 'Chronological activity feed',
    tool: {
      id: 'get_activity',
      name: 'get_activity',
      description: 'Get activity log',
      category: 'show',
      parameters: [
        { name: 'userId', type: 'string', description: 'User ID', required: true },
        { name: 'limit', type: 'number', description: 'Max entries', required: false, default: 50 },
      ],
      returnType: 'array',
      returnDescription: 'Activity entries',
      exampleInput: { userId: 'user_123', limit: 10 },
      exampleOutput: [{ action: 'login', timestamp: '2025-10-05T09:00:00Z' }],
    },
  },
  {
    id: 'report-summary',
    name: 'Report Summary',
    category: 'show',
    description: 'Generate summary report',
    userEnters: 'Report type and parameters',
    userSees: 'Formatted report with insights',
    tool: {
      id: 'generate_report',
      name: 'generate_report',
      description: 'Generate summary report',
      category: 'show',
      parameters: [
        { name: 'reportType', type: 'string', description: 'Type of report', required: true },
        { name: 'parameters', type: 'object', description: 'Report parameters', required: false },
      ],
      returnType: 'object',
      returnDescription: 'Report data',
      exampleInput: { reportType: 'sales', parameters: { month: '2025-10' } },
      exampleOutput: { totalSales: 50000, topProduct: 'Widget A', growth: '+15%' },
    },
  },

  // üîÑ Process Data (6 templates)
  {
    id: 'calculate',
    name: 'Calculate',
    category: 'process',
    description: 'Perform calculations or math operations',
    userEnters: 'Numbers and operation type',
    userSees: 'Calculated result',
    tool: {
      id: 'calculate',
      name: 'calculate',
      description: 'Perform calculation',
      category: 'process',
      parameters: [
        { name: 'operation', type: 'string', description: 'Operation type', required: true },
        { name: 'values', type: 'array', description: 'Input values', required: true },
      ],
      returnType: 'number',
      returnDescription: 'Calculation result',
      exampleInput: { operation: 'sum', values: [10, 20, 30] },
      exampleOutput: 60,
    },
  },
  {
    id: 'convert',
    name: 'Convert Format',
    category: 'process',
    description: 'Convert data between formats',
    userEnters: 'Data and target format',
    userSees: 'Converted output',
    tool: {
      id: 'convert_format',
      name: 'convert_format',
      description: 'Convert data format',
      category: 'process',
      parameters: [
        { name: 'data', type: 'string', description: 'Input data', required: true },
        { name: 'fromFormat', type: 'string', description: 'Source format', required: true },
        { name: 'toFormat', type: 'string', description: 'Target format', required: true },
      ],
      returnType: 'string',
      returnDescription: 'Converted data',
      exampleInput: { data: '{"name":"John"}', fromFormat: 'json', toFormat: 'xml' },
      exampleOutput: '<root><name>John</name></root>',
    },
  },
  {
    id: 'validate-data',
    name: 'Validate Data',
    category: 'process',
    description: 'Check data against rules',
    userEnters: 'Data and validation rules',
    userSees: 'Validation results with errors',
    tool: {
      id: 'validate',
      name: 'validate',
      description: 'Validate data',
      category: 'process',
      parameters: [
        { name: 'data', type: 'object', description: 'Data to validate', required: true },
        { name: 'schema', type: 'object', description: 'Validation schema', required: true },
      ],
      returnType: 'object',
      returnDescription: 'Validation results',
      exampleInput: { data: { email: 'test@example.com' }, schema: { email: 'email' } },
      exampleOutput: { valid: true, errors: [] },
    },
  },
  {
    id: 'generate-code',
    name: 'Generate Code',
    category: 'process',
    description: 'Generate code from template',
    userEnters: 'Template and variables',
    userSees: 'Generated code output',
    tool: {
      id: 'generate_code',
      name: 'generate_code',
      description: 'Generate code snippet',
      category: 'process',
      parameters: [
        { name: 'template', type: 'string', description: 'Code template', required: true },
        { name: 'variables', type: 'object', description: 'Template variables', required: true },
      ],
      returnType: 'string',
      returnDescription: 'Generated code',
      exampleInput: { template: 'function {{name}}() {}', variables: { name: 'hello' } },
      exampleOutput: 'function hello() {}',
    },
  },
  {
    id: 'transform-data',
    name: 'Transform Data',
    category: 'process',
    description: 'Apply transformations to data',
    userEnters: 'Data and transformation rules',
    userSees: 'Transformed output',
    tool: {
      id: 'transform',
      name: 'transform',
      description: 'Transform data structure',
      category: 'process',
      parameters: [
        { name: 'data', type: 'object', description: 'Input data', required: true },
        { name: 'rules', type: 'array', description: 'Transformation rules', required: true },
      ],
      returnType: 'object',
      returnDescription: 'Transformed data',
      exampleInput: { data: { first: 'John', last: 'Doe' }, rules: ['combine:first,last->fullName'] },
      exampleOutput: { fullName: 'John Doe' },
    },
  },
  {
    id: 'aggregate-data',
    name: 'Aggregate Data',
    category: 'process',
    description: 'Summarize and group data',
    userEnters: 'Dataset and grouping criteria',
    userSees: 'Aggregated statistics',
    tool: {
      id: 'aggregate',
      name: 'aggregate',
      description: 'Aggregate data',
      category: 'process',
      parameters: [
        { name: 'data', type: 'array', description: 'Dataset', required: true },
        { name: 'groupBy', type: 'string', description: 'Group by field', required: true },
        { name: 'operation', type: 'string', description: 'Aggregation operation', required: true },
      ],
      returnType: 'array',
      returnDescription: 'Aggregated results',
      exampleInput: { data: [{ category: 'A', value: 10 }], groupBy: 'category', operation: 'sum' },
      exampleOutput: [{ category: 'A', total: 10 }],
    },
  },

  // üîî Send Messages (6 templates)
  {
    id: 'send-email',
    name: 'Send Email',
    category: 'messages',
    description: 'Send email messages',
    userEnters: 'Recipient, subject, message',
    userSees: 'Email sent confirmation',
    tool: {
      id: 'send_email',
      name: 'send_email',
      description: 'Send email message',
      category: 'messages',
      parameters: [
        { name: 'to', type: 'string', description: 'Recipient email', required: true },
        { name: 'subject', type: 'string', description: 'Email subject', required: true },
        { name: 'body', type: 'string', description: 'Email body', required: true },
      ],
      returnType: 'object',
      returnDescription: 'Send confirmation',
      exampleInput: { to: 'user@example.com', subject: 'Hello', body: 'Message content' },
      exampleOutput: { sent: true, messageId: 'msg_123' },
    },
  },
  {
    id: 'push-notification',
    name: 'Push Notification',
    category: 'messages',
    description: 'Send push notifications to users',
    userEnters: 'User ID, title, message',
    userSees: 'Notification delivery status',
    tool: {
      id: 'send_notification',
      name: 'send_notification',
      description: 'Send push notification',
      category: 'messages',
      parameters: [
        { name: 'userId', type: 'string', description: 'Target user', required: true },
        { name: 'title', type: 'string', description: 'Notification title', required: true },
        { name: 'message', type: 'string', description: 'Notification message', required: true },
      ],
      returnType: 'object',
      returnDescription: 'Delivery status',
      exampleInput: { userId: 'user_123', title: 'Alert', message: 'You have a new message' },
      exampleOutput: { delivered: true, notificationId: 'notif_456' },
    },
  },
  {
    id: 'webhook-trigger',
    name: 'Webhook Trigger',
    category: 'messages',
    description: 'Send webhook HTTP POST requests',
    userEnters: 'Webhook URL and payload',
    userSees: 'Webhook response',
    tool: {
      id: 'trigger_webhook',
      name: 'trigger_webhook',
      description: 'Trigger webhook',
      category: 'messages',
      parameters: [
        { name: 'url', type: 'string', description: 'Webhook URL', required: true },
        { name: 'payload', type: 'object', description: 'Request payload', required: true },
      ],
      returnType: 'object',
      returnDescription: 'Webhook response',
      exampleInput: { url: 'https://api.example.com/webhook', payload: { event: 'user.created' } },
      exampleOutput: { success: true, status: 200 },
    },
  },
  {
    id: 'sms-message',
    name: 'SMS Message',
    category: 'messages',
    description: 'Send text messages',
    userEnters: 'Phone number and message',
    userSees: 'SMS delivery confirmation',
    tool: {
      id: 'send_sms',
      name: 'send_sms',
      description: 'Send SMS message',
      category: 'messages',
      parameters: [
        { name: 'phoneNumber', type: 'string', description: 'Recipient phone', required: true },
        { name: 'message', type: 'string', description: 'SMS text', required: true },
      ],
      returnType: 'object',
      returnDescription: 'SMS delivery status',
      exampleInput: { phoneNumber: '+1234567890', message: 'Your code is 123456' },
      exampleOutput: { sent: true, messageId: 'sms_789' },
    },
  },
  {
    id: 'slack-message',
    name: 'Slack Message',
    category: 'messages',
    description: 'Post to Slack channels',
    userEnters: 'Channel and message text',
    userSees: 'Slack post confirmation',
    tool: {
      id: 'post_slack',
      name: 'post_slack',
      description: 'Post to Slack channel',
      category: 'messages',
      parameters: [
        { name: 'channel', type: 'string', description: 'Slack channel', required: true },
        { name: 'text', type: 'string', description: 'Message text', required: true },
      ],
      returnType: 'object',
      returnDescription: 'Post confirmation',
      exampleInput: { channel: '#general', text: 'Hello team!' },
      exampleOutput: { posted: true, timestamp: '1633024800.000100' },
    },
  },
  {
    id: 'in-app-message',
    name: 'In-App Message',
    category: 'messages',
    description: 'Display in-app messages',
    userEnters: 'User ID and message content',
    userSees: 'Message display status',
    tool: {
      id: 'show_message',
      name: 'show_message',
      description: 'Show in-app message',
      category: 'messages',
      parameters: [
        { name: 'userId', type: 'string', description: 'Target user', required: true },
        { name: 'content', type: 'string', description: 'Message content', required: true },
        { name: 'priority', type: 'string', description: 'Message priority', required: false, default: 'normal' },
      ],
      returnType: 'object',
      returnDescription: 'Display status',
      exampleInput: { userId: 'user_123', content: 'Welcome!', priority: 'high' },
      exampleOutput: { displayed: true, messageId: 'msg_999' },
    },
  },

  // üîê Security & Access (6 templates)
  {
    id: 'login',
    name: 'User Login',
    category: 'security',
    description: 'Authenticate user credentials',
    userEnters: 'Username/email and password',
    userSees: 'Login success or error message',
    tool: {
      id: 'authenticate',
      name: 'authenticate',
      description: 'Authenticate user',
      category: 'security',
      parameters: [
        { name: 'username', type: 'string', description: 'Username or email', required: true },
        { name: 'password', type: 'string', description: 'User password', required: true },
      ],
      returnType: 'object',
      returnDescription: 'Authentication result',
      exampleInput: { username: 'john@example.com', password: 'secret' },
      exampleOutput: { success: true, token: 'jwt_token_here', userId: 'user_123' },
    },
  },
  {
    id: 'check-permissions',
    name: 'Check Permissions',
    category: 'security',
    description: 'Verify user access rights',
    userEnters: 'User ID and resource',
    userSees: 'Access granted or denied',
    tool: {
      id: 'check_access',
      name: 'check_access',
      description: 'Check user permissions',
      category: 'security',
      parameters: [
        { name: 'userId', type: 'string', description: 'User ID', required: true },
        { name: 'resource', type: 'string', description: 'Resource to access', required: true },
        { name: 'action', type: 'string', description: 'Action to perform', required: true },
      ],
      returnType: 'object',
      returnDescription: 'Permission check result',
      exampleInput: { userId: 'user_123', resource: 'document_456', action: 'edit' },
      exampleOutput: { allowed: true, reason: 'User is owner' },
    },
  },
  {
    id: 'password-reset',
    name: 'Password Reset',
    category: 'security',
    description: 'Reset user password',
    userEnters: 'Email address',
    userSees: 'Reset link sent confirmation',
    tool: {
      id: 'reset_password',
      name: 'reset_password',
      description: 'Initiate password reset',
      category: 'security',
      parameters: [
        { name: 'email', type: 'string', description: 'User email', required: true },
      ],
      returnType: 'object',
      returnDescription: 'Reset initiation status',
      exampleInput: { email: 'john@example.com' },
      exampleOutput: { sent: true, expiresIn: '1 hour' },
    },
  },
  {
    id: 'two-factor-auth',
    name: 'Two-Factor Auth',
    category: 'security',
    description: 'Verify 2FA code',
    userEnters: 'User ID and verification code',
    userSees: 'Verification success or failure',
    tool: {
      id: 'verify_2fa',
      name: 'verify_2fa',
      description: 'Verify 2FA code',
      category: 'security',
      parameters: [
        { name: 'userId', type: 'string', description: 'User ID', required: true },
        { name: 'code', type: 'string', description: 'Verification code', required: true },
      ],
      returnType: 'object',
      returnDescription: 'Verification result',
      exampleInput: { userId: 'user_123', code: '123456' },
      exampleOutput: { verified: true, token: 'jwt_token_here' },
    },
  },
  {
    id: 'api-key-gen',
    name: 'API Key Generator',
    category: 'security',
    description: 'Generate API access keys',
    userEnters: 'Key name and permissions',
    userSees: 'New API key',
    tool: {
      id: 'generate_api_key',
      name: 'generate_api_key',
      description: 'Generate new API key',
      category: 'security',
      parameters: [
        { name: 'name', type: 'string', description: 'Key name', required: true },
        { name: 'permissions', type: 'array', description: 'Key permissions', required: true },
      ],
      returnType: 'object',
      returnDescription: 'New API key',
      exampleInput: { name: 'Production Key', permissions: ['read', 'write'] },
      exampleOutput: { key: 'sk_live_abc123', expiresAt: '2026-10-05' },
    },
  },
  {
    id: 'session-check',
    name: 'Session Check',
    category: 'security',
    description: 'Validate session token',
    userEnters: 'Session token',
    userSees: 'Session validity status',
    tool: {
      id: 'validate_session',
      name: 'validate_session',
      description: 'Validate session',
      category: 'security',
      parameters: [
        { name: 'token', type: 'string', description: 'Session token', required: true },
      ],
      returnType: 'object',
      returnDescription: 'Session validation',
      exampleInput: { token: 'session_token_here' },
      exampleOutput: { valid: true, userId: 'user_123', expiresAt: '2025-10-06T10:00:00Z' },
    },
  },

  // üí∞ Money & Payments (6 templates)
  {
    id: 'process-payment',
    name: 'Process Payment',
    category: 'payments',
    description: 'Process credit card payment',
    userEnters: 'Amount, card details',
    userSees: 'Payment confirmation',
    tool: {
      id: 'process_payment',
      name: 'process_payment',
      description: 'Process payment',
      category: 'payments',
      parameters: [
        { name: 'amount', type: 'number', description: 'Payment amount', required: true },
        { name: 'currency', type: 'string', description: 'Currency code', required: true },
        { name: 'paymentMethod', type: 'string', description: 'Payment method ID', required: true },
      ],
      returnType: 'object',
      returnDescription: 'Payment result',
      exampleInput: { amount: 99.99, currency: 'USD', paymentMethod: 'pm_123' },
      exampleOutput: { success: true, transactionId: 'txn_456', status: 'paid' },
    },
  },
  {
    id: 'get-pricing',
    name: 'Get Pricing',
    category: 'payments',
    description: 'Calculate pricing and fees',
    userEnters: 'Product ID and quantity',
    userSees: 'Price breakdown with taxes',
    tool: {
      id: 'calculate_price',
      name: 'calculate_price',
      description: 'Calculate pricing',
      category: 'payments',
      parameters: [
        { name: 'productId', type: 'string', description: 'Product ID', required: true },
        { name: 'quantity', type: 'number', description: 'Quantity', required: true },
        { name: 'couponCode', type: 'string', description: 'Discount code', required: false },
      ],
      returnType: 'object',
      returnDescription: 'Price breakdown',
      exampleInput: { productId: 'prod_123', quantity: 2, couponCode: 'SAVE10' },
      exampleOutput: { subtotal: 200, discount: 20, tax: 18, total: 198 },
    },
  },
  {
    id: 'apply-discount',
    name: 'Apply Discount',
    category: 'payments',
    description: 'Apply coupon or promo code',
    userEnters: 'Coupon code',
    userSees: 'Discount applied confirmation',
    tool: {
      id: 'apply_coupon',
      name: 'apply_coupon',
      description: 'Apply discount coupon',
      category: 'payments',
      parameters: [
        { name: 'code', type: 'string', description: 'Coupon code', required: true },
        { name: 'cartTotal', type: 'number', description: 'Cart total', required: true },
      ],
      returnType: 'object',
      returnDescription: 'Discount details',
      exampleInput: { code: 'SAVE10', cartTotal: 100 },
      exampleOutput: { valid: true, discountAmount: 10, newTotal: 90 },
    },
  },
  {
    id: 'refund',
    name: 'Process Refund',
    category: 'payments',
    description: 'Refund a transaction',
    userEnters: 'Transaction ID and amount',
    userSees: 'Refund confirmation',
    tool: {
      id: 'process_refund',
      name: 'process_refund',
      description: 'Process refund',
      category: 'payments',
      parameters: [
        { name: 'transactionId', type: 'string', description: 'Transaction ID', required: true },
        { name: 'amount', type: 'number', description: 'Refund amount', required: false },
      ],
      returnType: 'object',
      returnDescription: 'Refund result',
      exampleInput: { transactionId: 'txn_456', amount: 99.99 },
      exampleOutput: { refunded: true, refundId: 'ref_789', status: 'pending' },
    },
  },
  {
    id: 'subscription',
    name: 'Manage Subscription',
    category: 'payments',
    description: 'Subscribe or update plan',
    userEnters: 'Plan ID and billing info',
    userSees: 'Subscription confirmation',
    tool: {
      id: 'manage_subscription',
      name: 'manage_subscription',
      description: 'Manage subscription',
      category: 'payments',
      parameters: [
        { name: 'action', type: 'string', description: 'Action (subscribe/update/cancel)', required: true },
        { name: 'planId', type: 'string', description: 'Subscription plan', required: true },
      ],
      returnType: 'object',
      returnDescription: 'Subscription status',
      exampleInput: { action: 'subscribe', planId: 'plan_pro' },
      exampleOutput: { success: true, subscriptionId: 'sub_123', nextBillingDate: '2025-11-05' },
    },
  },
  {
    id: 'invoice',
    name: 'Generate Invoice',
    category: 'payments',
    description: 'Create customer invoice',
    userEnters: 'Customer ID and line items',
    userSees: 'Invoice PDF',
    tool: {
      id: 'create_invoice',
      name: 'create_invoice',
      description: 'Generate invoice',
      category: 'payments',
      parameters: [
        { name: 'customerId', type: 'string', description: 'Customer ID', required: true },
        { name: 'items', type: 'array', description: 'Invoice line items', required: true },
      ],
      returnType: 'object',
      returnDescription: 'Invoice details',
      exampleInput: { customerId: 'cust_123', items: [{ description: 'Service', amount: 100 }] },
      exampleOutput: { invoiceId: 'inv_456', total: 100, pdfUrl: 'https://...' },
    },
  },

  // üìÅ Files & Media (6 templates)
  {
    id: 'upload-file',
    name: 'Upload File',
    category: 'files',
    description: 'Upload files to storage',
    userEnters: 'File data and metadata',
    userSees: 'Upload progress and URL',
    tool: {
      id: 'upload_file',
      name: 'upload_file',
      description: 'Upload file',
      category: 'files',
      parameters: [
        { name: 'filename', type: 'string', description: 'File name', required: true },
        { name: 'data', type: 'string', description: 'File data (base64)', required: true },
        { name: 'folder', type: 'string', description: 'Upload folder', required: false },
      ],
      returnType: 'object',
      returnDescription: 'Upload result',
      exampleInput: { filename: 'document.pdf', data: 'base64...', folder: 'documents' },
      exampleOutput: { success: true, fileId: 'file_123', url: 'https://cdn.example.com/file_123' },
    },
  },
  {
    id: 'download-file',
    name: 'Download File',
    category: 'files',
    description: 'Retrieve file from storage',
    userEnters: 'File ID or path',
    userSees: 'Download link',
    tool: {
      id: 'download_file',
      name: 'download_file',
      description: 'Get file download URL',
      category: 'files',
      parameters: [
        { name: 'fileId', type: 'string', description: 'File ID', required: true },
      ],
      returnType: 'object',
      returnDescription: 'Download info',
      exampleInput: { fileId: 'file_123' },
      exampleOutput: { url: 'https://cdn.example.com/file_123', expiresAt: '2025-10-06T10:00:00Z' },
    },
  },
  {
    id: 'preview-file',
    name: 'Preview File',
    category: 'files',
    description: 'Generate file preview',
    userEnters: 'File ID',
    userSees: 'Preview image or viewer',
    tool: {
      id: 'preview_file',
      name: 'preview_file',
      description: 'Get file preview',
      category: 'files',
      parameters: [
        { name: 'fileId', type: 'string', description: 'File ID', required: true },
        { name: 'size', type: 'string', description: 'Preview size', required: false, default: 'medium' },
      ],
      returnType: 'object',
      returnDescription: 'Preview info',
      exampleInput: { fileId: 'file_123', size: 'large' },
      exampleOutput: { previewUrl: 'https://cdn.example.com/preview_123.jpg' },
    },
  },
  {
    id: 'convert-file',
    name: 'Convert File',
    category: 'files',
    description: 'Convert file format',
    userEnters: 'File ID and target format',
    userSees: 'Converted file download',
    tool: {
      id: 'convert_file',
      name: 'convert_file',
      description: 'Convert file format',
      category: 'files',
      parameters: [
        { name: 'fileId', type: 'string', description: 'File ID', required: true },
        { name: 'targetFormat', type: 'string', description: 'Target format', required: true },
      ],
      returnType: 'object',
      returnDescription: 'Conversion result',
      exampleInput: { fileId: 'file_123', targetFormat: 'pdf' },
      exampleOutput: { success: true, convertedFileId: 'file_456', url: 'https://...' },
    },
  },
  {
    id: 'list-files',
    name: 'List Files',
    category: 'files',
    description: 'Browse files in folder',
    userEnters: 'Folder path and filters',
    userSees: 'File list with details',
    tool: {
      id: 'list_files',
      name: 'list_files',
      description: 'List files',
      category: 'files',
      parameters: [
        { name: 'folder', type: 'string', description: 'Folder path', required: false },
        { name: 'fileType', type: 'string', description: 'File type filter', required: false },
      ],
      returnType: 'array',
      returnDescription: 'File list',
      exampleInput: { folder: 'documents', fileType: 'pdf' },
      exampleOutput: [{ id: 'file_123', name: 'doc.pdf', size: 1024, createdAt: '2025-10-01' }],
    },
  },
  {
    id: 'delete-file',
    name: 'Delete File',
    category: 'files',
    description: 'Remove file from storage',
    userEnters: 'File ID to delete',
    userSees: 'Deletion confirmation',
    tool: {
      id: 'delete_file',
      name: 'delete_file',
      description: 'Delete file',
      category: 'files',
      parameters: [
        { name: 'fileId', type: 'string', description: 'File ID', required: true },
        { name: 'permanent', type: 'boolean', description: 'Permanent deletion', required: false, default: false },
      ],
      returnType: 'object',
      returnDescription: 'Deletion result',
      exampleInput: { fileId: 'file_123', permanent: true },
      exampleOutput: { deleted: true, fileId: 'file_123' },
    },
  },

  // üåê External Services (6 templates)
  {
    id: 'weather-api',
    name: 'Weather Data',
    category: 'external',
    description: 'Get current weather',
    userEnters: 'Location or coordinates',
    userSees: 'Weather conditions and forecast',
    tool: {
      id: 'get_weather',
      name: 'get_weather',
      description: 'Get weather data',
      category: 'external',
      parameters: [
        { name: 'location', type: 'string', description: 'City name or coordinates', required: true },
      ],
      returnType: 'object',
      returnDescription: 'Weather data',
      exampleInput: { location: 'San Francisco' },
      exampleOutput: { temp: 72, condition: 'Sunny', humidity: 65, forecast: '...' },
    },
  },
  {
    id: 'url-shortener',
    name: 'URL Shortener',
    category: 'external',
    description: 'Shorten long URLs',
    userEnters: 'Long URL',
    userSees: 'Short URL and QR code',
    tool: {
      id: 'shorten_url',
      name: 'shorten_url',
      description: 'Shorten URL',
      category: 'external',
      parameters: [
        { name: 'url', type: 'string', description: 'Long URL', required: true },
      ],
      returnType: 'object',
      returnDescription: 'Shortened URL',
      exampleInput: { url: 'https://example.com/very/long/path' },
      exampleOutput: { shortUrl: 'https://short.link/abc123', qrCode: 'data:image/png;base64,...' },
    },
  },
  {
    id: 'translate-text',
    name: 'Text Translation',
    category: 'external',
    description: 'Translate text between languages',
    userEnters: 'Text and target language',
    userSees: 'Translated text',
    tool: {
      id: 'translate',
      name: 'translate',
      description: 'Translate text',
      category: 'external',
      parameters: [
        { name: 'text', type: 'string', description: 'Text to translate', required: true },
        { name: 'targetLanguage', type: 'string', description: 'Target language code', required: true },
        { name: 'sourceLanguage', type: 'string', description: 'Source language', required: false },
      ],
      returnType: 'object',
      returnDescription: 'Translation result',
      exampleInput: { text: 'Hello', targetLanguage: 'es' },
      exampleOutput: { translatedText: 'Hola', detectedLanguage: 'en' },
    },
  },
  {
    id: 'geocode',
    name: 'Geocoding',
    category: 'external',
    description: 'Convert addresses to coordinates',
    userEnters: 'Street address',
    userSees: 'Latitude and longitude',
    tool: {
      id: 'geocode',
      name: 'geocode',
      description: 'Geocode address',
      category: 'external',
      parameters: [
        { name: 'address', type: 'string', description: 'Street address', required: true },
      ],
      returnType: 'object',
      returnDescription: 'Geocoding result',
      exampleInput: { address: '1600 Amphitheatre Parkway, Mountain View, CA' },
      exampleOutput: { latitude: 37.4224764, longitude: -122.0842499, formattedAddress: '...' },
    },
  },
  {
    id: 'qr-code',
    name: 'QR Code Generator',
    category: 'external',
    description: 'Generate QR codes',
    userEnters: 'Data to encode',
    userSees: 'QR code image',
    tool: {
      id: 'generate_qr',
      name: 'generate_qr',
      description: 'Generate QR code',
      category: 'external',
      parameters: [
        { name: 'data', type: 'string', description: 'Data to encode', required: true },
        { name: 'size', type: 'number', description: 'Image size', required: false, default: 256 },
      ],
      returnType: 'object',
      returnDescription: 'QR code image',
      exampleInput: { data: 'https://example.com', size: 512 },
      exampleOutput: { imageUrl: 'data:image/png;base64,...', format: 'png' },
    },
  },
  {
    id: 'currency-exchange',
    name: 'Currency Exchange',
    category: 'external',
    description: 'Convert currency amounts',
    userEnters: 'Amount and currencies',
    userSees: 'Converted amount',
    tool: {
      id: 'convert_currency',
      name: 'convert_currency',
      description: 'Convert currency',
      category: 'external',
      parameters: [
        { name: 'amount', type: 'number', description: 'Amount to convert', required: true },
        { name: 'fromCurrency', type: 'string', description: 'Source currency', required: true },
        { name: 'toCurrency', type: 'string', description: 'Target currency', required: true },
      ],
      returnType: 'object',
      returnDescription: 'Conversion result',
      exampleInput: { amount: 100, fromCurrency: 'USD', toCurrency: 'EUR' },
      exampleOutput: { convertedAmount: 92.5, rate: 0.925, timestamp: '2025-10-05T10:00:00Z' },
    },
  },
];

export const getCategorizedTemplates = () => {
  const categories: Record<string, ToolTemplate[]> = {};

  toolTemplates.forEach((template) => {
    if (!categories[template.category]) {
      categories[template.category] = [];
    }
    categories[template.category].push(template);
  });

  return categories;
};

export const getCategoryInfo = (category: string) => {
  const info: Record<string, { icon: string; title: string; description: string }> = {
    forms: {
      icon: 'FileText',
      title: 'Accept Form Data',
      description: 'Collect user input through forms and submissions',
    },
    search: {
      icon: 'Search',
      title: 'Search & Find',
      description: 'Search, filter, and discover content',
    },
    save: {
      icon: 'Save',
      title: 'Save & Store',
      description: 'Create, update, and manage data',
    },
    show: {
      icon: 'BarChart3',
      title: 'Show Information',
      description: 'Display data, reports, and dashboards',
    },
    process: {
      icon: 'RefreshCw',
      title: 'Process Data',
      description: 'Transform, validate, and calculate',
    },
    messages: {
      icon: 'Bell',
      title: 'Send Messages',
      description: 'Send notifications and communications',
    },
    security: {
      icon: 'Shield',
      title: 'Security & Access',
      description: 'Authentication and authorization',
    },
    payments: {
      icon: 'CreditCard',
      title: 'Money & Payments',
      description: 'Process payments and transactions',
    },
    files: {
      icon: 'Folder',
      title: 'Files & Media',
      description: 'Upload, download, and manage files',
    },
    external: {
      icon: 'Globe',
      title: 'External Services',
      description: 'Integrate with third-party APIs',
    },
  };

  return info[category] || { icon: 'üì¶', title: category, description: '' };
};
