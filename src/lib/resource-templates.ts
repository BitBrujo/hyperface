import type { ResourceTemplate } from '@/types/server-builder';

export const resourceTemplates: ResourceTemplate[] = [
  // üìù Accept Form Data (6 templates)
  {
    id: 'contact-form-schema',
    name: 'Contact Form Schema',
    category: 'forms',
    description: 'JSON schema for contact form validation',
    userProvides: 'Form field definitions with validation rules',
    aiSees: 'Required fields, types, and validation constraints',
    resource: {
      id: 'contact_form_schema',
      uri: 'schema://forms/contact',
      name: 'contact_form_schema',
      description: 'Contact form validation schema',
      category: 'forms',
      mimeType: 'application/json',
      isTemplate: false,
      exampleData: {
        type: 'object',
        required: ['name', 'email', 'message'],
        properties: {
          name: { type: 'string', minLength: 2 },
          email: { type: 'string', format: 'email' },
          message: { type: 'string', minLength: 10 },
        },
      },
    },
  },
  {
    id: 'form-templates',
    name: 'Form Templates',
    category: 'forms',
    description: 'HTML form templates by type',
    userProvides: 'Pre-built HTML form layouts',
    aiSees: 'Available form structures and field arrangements',
    resource: {
      id: 'form_templates',
      uri: 'templates://forms/{formType}',
      name: 'form_templates',
      description: 'Get form template by type',
      category: 'forms',
      mimeType: 'text/html',
      isTemplate: true,
      uriVariables: [
        { name: 'formType', type: 'string', description: 'Type of form (contact, signup, feedback)', required: true },
      ],
      exampleData: '<form><input name="name" required /><input name="email" type="email" required /></form>',
    },
  },
  {
    id: 'validation-rules',
    name: 'Validation Rules',
    category: 'forms',
    description: 'Form validation rule sets',
    userProvides: 'Validation patterns and error messages',
    aiSees: 'How to validate form inputs correctly',
    resource: {
      id: 'validation_rules',
      uri: 'validation://forms/rules',
      name: 'validation_rules',
      description: 'Common validation rules',
      category: 'forms',
      mimeType: 'application/json',
      isTemplate: false,
      exampleData: {
        email: { pattern: '^[^@]+@[^@]+\\.[^@]+$', message: 'Invalid email format' },
        phone: { pattern: '^\\+?[0-9]{10,15}$', message: 'Invalid phone number' },
        password: { minLength: 8, requireSpecialChar: true },
      },
    },
  },
  {
    id: 'form-defaults',
    name: 'Form Defaults',
    category: 'forms',
    description: 'Default values for form fields',
    userProvides: 'Pre-filled form data and placeholders',
    aiSees: 'Default values to suggest to users',
    resource: {
      id: 'form_defaults',
      uri: 'defaults://forms/{formId}',
      name: 'form_defaults',
      description: 'Get default values for form',
      category: 'forms',
      mimeType: 'application/json',
      isTemplate: true,
      uriVariables: [
        { name: 'formId', type: 'string', description: 'Form identifier', required: true },
      ],
      exampleData: { country: 'US', language: 'en', notifications: true },
    },
  },
  {
    id: 'submission-history',
    name: 'Submission History',
    category: 'forms',
    description: 'Recent form submissions',
    userProvides: 'Historical submission data',
    aiSees: 'Previous form submissions and patterns',
    resource: {
      id: 'submission_history',
      uri: 'history://forms/submissions',
      name: 'submission_history',
      description: 'Recent form submissions',
      category: 'forms',
      mimeType: 'application/json',
      isTemplate: false,
      exampleData: [
        { id: 1, form: 'contact', submittedAt: '2025-10-05T10:00:00Z', status: 'processed' },
        { id: 2, form: 'feedback', submittedAt: '2025-10-05T09:30:00Z', status: 'pending' },
      ],
    },
  },
  {
    id: 'field-options',
    name: 'Field Options',
    category: 'forms',
    description: 'Dropdown and select field options',
    userProvides: 'Available choices for form fields',
    aiSees: 'Valid options for dropdown menus',
    resource: {
      id: 'field_options',
      uri: 'options://forms/{fieldName}',
      name: 'field_options',
      description: 'Get options for form field',
      category: 'forms',
      mimeType: 'application/json',
      isTemplate: true,
      uriVariables: [
        { name: 'fieldName', type: 'string', description: 'Field name', required: true },
      ],
      exampleData: ['Option 1', 'Option 2', 'Option 3'],
    },
  },

  // üîç Search & Find (6 templates)
  {
    id: 'search-index',
    name: 'Search Index',
    category: 'search',
    description: 'Searchable product catalog',
    userProvides: 'Product data with searchable fields',
    aiSees: 'Available products and their attributes',
    resource: {
      id: 'search_index',
      uri: 'index://search/products',
      name: 'search_index',
      description: 'Product search index',
      category: 'search',
      mimeType: 'application/json',
      isTemplate: false,
      exampleData: [
        { id: 1, name: 'Laptop', category: 'electronics', price: 999, inStock: true },
        { id: 2, name: 'Mouse', category: 'electronics', price: 29, inStock: true },
      ],
    },
  },
  {
    id: 'search-facets',
    name: 'Search Facets',
    category: 'search',
    description: 'Available search filters by category',
    userProvides: 'Filter options and counts',
    aiSees: 'How to narrow down search results',
    resource: {
      id: 'search_facets',
      uri: 'facets://search/{category}',
      name: 'search_facets',
      description: 'Get facets for category',
      category: 'search',
      mimeType: 'application/json',
      isTemplate: true,
      uriVariables: [
        { name: 'category', type: 'string', description: 'Product category', required: true },
      ],
      exampleData: {
        brand: { apple: 45, dell: 32, hp: 28 },
        priceRange: { '0-500': 60, '500-1000': 30, '1000+': 15 },
      },
    },
  },
  {
    id: 'search-suggestions',
    name: 'Search Suggestions',
    category: 'search',
    description: 'Popular search terms',
    userProvides: 'Trending and suggested queries',
    aiSees: 'What users commonly search for',
    resource: {
      id: 'search_suggestions',
      uri: 'suggestions://search',
      name: 'search_suggestions',
      description: 'Popular search suggestions',
      category: 'search',
      mimeType: 'application/json',
      isTemplate: false,
      exampleData: ['laptop deals', 'wireless mouse', 'gaming keyboard', 'usb cable'],
    },
  },
  {
    id: 'recent-searches',
    name: 'Recent Searches',
    category: 'search',
    description: 'User search history',
    userProvides: 'Past search queries and results',
    aiSees: 'What the user searched for recently',
    resource: {
      id: 'recent_searches',
      uri: 'history://search/recent',
      name: 'recent_searches',
      description: 'Recent search history',
      category: 'search',
      mimeType: 'application/json',
      isTemplate: false,
      exampleData: [
        { query: 'laptop', timestamp: '2025-10-05T10:00:00Z', resultsCount: 45 },
        { query: 'mouse', timestamp: '2025-10-05T09:30:00Z', resultsCount: 23 },
      ],
    },
  },
  {
    id: 'search-synonyms',
    name: 'Search Synonyms',
    category: 'search',
    description: 'Term synonyms for better search',
    userProvides: 'Related terms and aliases',
    aiSees: 'Alternative search terms',
    resource: {
      id: 'search_synonyms',
      uri: 'synonyms://search/{term}',
      name: 'search_synonyms',
      description: 'Get synonyms for term',
      category: 'search',
      mimeType: 'application/json',
      isTemplate: true,
      uriVariables: [
        { name: 'term', type: 'string', description: 'Search term', required: true },
      ],
      exampleData: ['laptop', 'notebook', 'portable computer'],
    },
  },
  {
    id: 'category-tree',
    name: 'Category Tree',
    category: 'search',
    description: 'Product category hierarchy',
    userProvides: 'Nested category structure',
    aiSees: 'How products are organized',
    resource: {
      id: 'category_tree',
      uri: 'categories://search/tree',
      name: 'category_tree',
      description: 'Category hierarchy',
      category: 'search',
      mimeType: 'application/json',
      isTemplate: false,
      exampleData: {
        electronics: { computers: ['laptops', 'desktops'], accessories: ['keyboards', 'mice'] },
      },
    },
  },

  // üíæ Save & Store (6 templates)
  {
    id: 'data-schema',
    name: 'Data Schema',
    category: 'save',
    description: 'Entity validation schemas',
    userProvides: 'Data structure definitions',
    aiSees: 'Required fields and data types',
    resource: {
      id: 'data_schema',
      uri: 'schema://data/{entityType}',
      name: 'data_schema',
      description: 'Get schema for entity type',
      category: 'save',
      mimeType: 'application/json',
      isTemplate: true,
      uriVariables: [
        { name: 'entityType', type: 'string', description: 'Entity type', required: true },
      ],
      exampleData: {
        type: 'object',
        required: ['id', 'name'],
        properties: { id: { type: 'string' }, name: { type: 'string' } },
      },
    },
  },
  {
    id: 'storage-quota',
    name: 'Storage Quota',
    category: 'save',
    description: 'Storage limits and usage',
    userProvides: 'Available space and limits',
    aiSees: 'How much storage is left',
    resource: {
      id: 'storage_quota',
      uri: 'quota://storage/current',
      name: 'storage_quota',
      description: 'Current storage quota',
      category: 'save',
      mimeType: 'application/json',
      isTemplate: false,
      exampleData: { used: 450000000, total: 1000000000, unit: 'bytes', percentage: 45 },
    },
  },
  {
    id: 'draft-autosave',
    name: 'Draft Autosave',
    category: 'save',
    description: 'Auto-saved drafts',
    userProvides: 'Saved work in progress',
    aiSees: 'Draft content to restore',
    resource: {
      id: 'draft_autosave',
      uri: 'drafts://storage/{draftId}',
      name: 'draft_autosave',
      description: 'Get draft by ID',
      category: 'save',
      mimeType: 'application/json',
      isTemplate: true,
      uriVariables: [
        { name: 'draftId', type: 'string', description: 'Draft identifier', required: true },
      ],
      exampleData: { id: 'draft_123', content: '...', savedAt: '2025-10-05T10:00:00Z' },
    },
  },
  {
    id: 'backup-list',
    name: 'Backup List',
    category: 'save',
    description: 'Available backups',
    userProvides: 'Backup versions and timestamps',
    aiSees: 'When data was backed up',
    resource: {
      id: 'backup_list',
      uri: 'backups://storage/list',
      name: 'backup_list',
      description: 'List of backups',
      category: 'save',
      mimeType: 'application/json',
      isTemplate: false,
      exampleData: [
        { id: 'backup_1', createdAt: '2025-10-05T00:00:00Z', size: 1024000 },
        { id: 'backup_2', createdAt: '2025-10-04T00:00:00Z', size: 1020000 },
      ],
    },
  },
  {
    id: 'version-history',
    name: 'Version History',
    category: 'save',
    description: 'Document revision history',
    userProvides: 'Previous versions and changes',
    aiSees: 'How content evolved over time',
    resource: {
      id: 'version_history',
      uri: 'versions://storage/{itemId}',
      name: 'version_history',
      description: 'Get version history for item',
      category: 'save',
      mimeType: 'application/json',
      isTemplate: true,
      uriVariables: [
        { name: 'itemId', type: 'string', description: 'Item identifier', required: true },
      ],
      exampleData: [
        { version: 3, author: 'user_123', timestamp: '2025-10-05T10:00:00Z', changes: 'Updated title' },
      ],
    },
  },
  {
    id: 'import-templates',
    name: 'Import Templates',
    category: 'save',
    description: 'Data import format templates',
    userProvides: 'Expected CSV/JSON structure',
    aiSees: 'How to format import data',
    resource: {
      id: 'import_templates',
      uri: 'templates://import/{format}',
      name: 'import_templates',
      description: 'Get import template for format',
      category: 'save',
      mimeType: 'application/json',
      isTemplate: true,
      uriVariables: [
        { name: 'format', type: 'string', description: 'Import format (csv, json, xml)', required: true },
      ],
      exampleData: { headers: ['id', 'name', 'email'], example: '1,John,john@example.com' },
    },
  },

  // üìä Show Information (6 templates)
  {
    id: 'dashboard-config',
    name: 'Dashboard Config',
    category: 'show',
    description: 'Dashboard layout and widgets',
    userProvides: 'Widget arrangement and settings',
    aiSees: 'What metrics to display',
    resource: {
      id: 'dashboard_config',
      uri: 'config://dashboard/main',
      name: 'dashboard_config',
      description: 'Main dashboard configuration',
      category: 'show',
      mimeType: 'application/json',
      isTemplate: false,
      exampleData: {
        widgets: [
          { type: 'chart', metric: 'revenue', position: { x: 0, y: 0 } },
          { type: 'counter', metric: 'users', position: { x: 1, y: 0 } },
        ],
      },
    },
  },
  {
    id: 'report-data',
    name: 'Report Data',
    category: 'show',
    description: 'Report data by type and period',
    userProvides: 'Aggregated metrics and statistics',
    aiSees: 'Report insights and trends',
    resource: {
      id: 'report_data',
      uri: 'reports://data/{reportType}/{period}',
      name: 'report_data',
      description: 'Get report data',
      category: 'show',
      mimeType: 'application/json',
      isTemplate: true,
      uriVariables: [
        { name: 'reportType', type: 'string', description: 'Type of report', required: true },
        { name: 'period', type: 'string', description: 'Time period', required: true },
      ],
      exampleData: { total: 50000, growth: '+15%', topItem: 'Widget A' },
    },
  },
  {
    id: 'kpi-metrics',
    name: 'KPI Metrics',
    category: 'show',
    description: 'Key performance indicators',
    userProvides: 'Current KPI values',
    aiSees: 'Business performance metrics',
    resource: {
      id: 'kpi_metrics',
      uri: 'metrics://kpi/current',
      name: 'kpi_metrics',
      description: 'Current KPI values',
      category: 'show',
      mimeType: 'application/json',
      isTemplate: false,
      exampleData: {
        revenue: { value: 150000, target: 200000, unit: 'USD' },
        users: { value: 1250, target: 1500, unit: 'count' },
      },
    },
  },
  {
    id: 'user-stats',
    name: 'User Statistics',
    category: 'show',
    description: 'User activity statistics',
    userProvides: 'Engagement and usage data',
    aiSees: 'How users interact with the system',
    resource: {
      id: 'user_stats',
      uri: 'stats://users/{userId}',
      name: 'user_stats',
      description: 'Get stats for user',
      category: 'show',
      mimeType: 'application/json',
      isTemplate: true,
      uriVariables: [
        { name: 'userId', type: 'string', description: 'User identifier', required: true },
      ],
      exampleData: { totalLogins: 145, lastActive: '2025-10-05T10:00:00Z', itemsCreated: 23 },
    },
  },
  {
    id: 'chart-data',
    name: 'Chart Data',
    category: 'show',
    description: 'Data for charts and graphs',
    userProvides: 'Time series or categorical data',
    aiSees: 'Data points for visualization',
    resource: {
      id: 'chart_data',
      uri: 'charts://data/{chartType}',
      name: 'chart_data',
      description: 'Get data for chart type',
      category: 'show',
      mimeType: 'application/json',
      isTemplate: true,
      uriVariables: [
        { name: 'chartType', type: 'string', description: 'Type of chart', required: true },
      ],
      exampleData: [
        { date: '2025-10-01', value: 100 },
        { date: '2025-10-02', value: 150 },
      ],
    },
  },
  {
    id: 'activity-feed',
    name: 'Activity Feed',
    category: 'show',
    description: 'Recent activity stream',
    userProvides: 'Chronological event log',
    aiSees: 'Recent system events',
    resource: {
      id: 'activity_feed',
      uri: 'feed://activity/recent',
      name: 'activity_feed',
      description: 'Recent activity feed',
      category: 'show',
      mimeType: 'application/json',
      isTemplate: false,
      exampleData: [
        { user: 'user_123', action: 'created', item: 'document', timestamp: '2025-10-05T10:00:00Z' },
      ],
    },
  },

  // üîÑ Process Data (6 templates)
  {
    id: 'transformation-rules',
    name: 'Transformation Rules',
    category: 'process',
    description: 'Data transformation schemas',
    userProvides: 'Field mapping and conversion rules',
    aiSees: 'How to transform data structures',
    resource: {
      id: 'transformation_rules',
      uri: 'rules://transform/{ruleSet}',
      name: 'transformation_rules',
      description: 'Get transformation rules',
      category: 'process',
      mimeType: 'application/json',
      isTemplate: true,
      uriVariables: [
        { name: 'ruleSet', type: 'string', description: 'Rule set name', required: true },
      ],
      exampleData: { mappings: [{ from: 'firstName', to: 'first_name', type: 'rename' }] },
    },
  },
  {
    id: 'calculation-formulas',
    name: 'Calculation Formulas',
    category: 'process',
    description: 'Standard calculation formulas',
    userProvides: 'Math formulas and functions',
    aiSees: 'Available calculations',
    resource: {
      id: 'calculation_formulas',
      uri: 'formulas://calculations/standard',
      name: 'calculation_formulas',
      description: 'Standard calculation formulas',
      category: 'process',
      mimeType: 'application/json',
      isTemplate: false,
      exampleData: {
        tax: { formula: 'amount * taxRate', description: 'Calculate tax' },
        discount: { formula: 'price * (1 - discountPercent)', description: 'Apply discount' },
      },
    },
  },
  {
    id: 'validation-schemas',
    name: 'Validation Schemas',
    category: 'process',
    description: 'Data validation rules',
    userProvides: 'Validation constraints',
    aiSees: 'How to validate data',
    resource: {
      id: 'validation_schemas',
      uri: 'schemas://validation/{dataType}',
      name: 'validation_schemas',
      description: 'Get validation schema',
      category: 'process',
      mimeType: 'application/json',
      isTemplate: true,
      uriVariables: [
        { name: 'dataType', type: 'string', description: 'Data type to validate', required: true },
      ],
      exampleData: { type: 'object', required: ['field1'], properties: { field1: { type: 'string' } } },
    },
  },
  {
    id: 'processing-queue',
    name: 'Processing Queue',
    category: 'process',
    description: 'Items awaiting processing',
    userProvides: 'Queue status and pending items',
    aiSees: 'What is being processed',
    resource: {
      id: 'processing_queue',
      uri: 'queue://processing/status',
      name: 'processing_queue',
      description: 'Processing queue status',
      category: 'process',
      mimeType: 'application/json',
      isTemplate: false,
      exampleData: {
        pending: 12,
        processing: 3,
        completed: 145,
        items: [{ id: 'item_1', status: 'processing', progress: 45 }],
      },
    },
  },
  {
    id: 'conversion-rates',
    name: 'Conversion Rates',
    category: 'process',
    description: 'Currency and unit conversion rates',
    userProvides: 'Current exchange rates',
    aiSees: 'How to convert values',
    resource: {
      id: 'conversion_rates',
      uri: 'rates://conversion/{fromUnit}/{toUnit}',
      name: 'conversion_rates',
      description: 'Get conversion rate',
      category: 'process',
      mimeType: 'application/json',
      isTemplate: true,
      uriVariables: [
        { name: 'fromUnit', type: 'string', description: 'Source unit', required: true },
        { name: 'toUnit', type: 'string', description: 'Target unit', required: true },
      ],
      exampleData: { rate: 0.925, timestamp: '2025-10-05T10:00:00Z' },
    },
  },
  {
    id: 'aggregation-config',
    name: 'Aggregation Config',
    category: 'process',
    description: 'Data aggregation settings',
    userProvides: 'Grouping and summary rules',
    aiSees: 'How to aggregate data',
    resource: {
      id: 'aggregation_config',
      uri: 'config://aggregation/{aggregationType}',
      name: 'aggregation_config',
      description: 'Get aggregation config',
      category: 'process',
      mimeType: 'application/json',
      isTemplate: true,
      uriVariables: [
        { name: 'aggregationType', type: 'string', description: 'Aggregation type', required: true },
      ],
      exampleData: { groupBy: 'category', operation: 'sum', field: 'value' },
    },
  },

  // üîî Send Messages (6 templates)
  {
    id: 'message-templates',
    name: 'Message Templates',
    category: 'messages',
    description: 'Email and SMS templates',
    userProvides: 'Pre-written message content',
    aiSees: 'Template text and placeholders',
    resource: {
      id: 'message_templates',
      uri: 'templates://messages/{templateId}',
      name: 'message_templates',
      description: 'Get message template',
      category: 'messages',
      mimeType: 'text/plain',
      isTemplate: true,
      uriVariables: [
        { name: 'templateId', type: 'string', description: 'Template identifier', required: true },
      ],
      exampleData: 'Hello {{name}}, your order {{orderId}} has been shipped.',
    },
  },
  {
    id: 'notification-prefs',
    name: 'Notification Preferences',
    category: 'messages',
    description: 'User notification settings',
    userProvides: 'User communication preferences',
    aiSees: 'How user wants to be notified',
    resource: {
      id: 'notification_prefs',
      uri: 'preferences://notifications/{userId}',
      name: 'notification_prefs',
      description: 'Get notification preferences',
      category: 'messages',
      mimeType: 'application/json',
      isTemplate: true,
      uriVariables: [
        { name: 'userId', type: 'string', description: 'User identifier', required: true },
      ],
      exampleData: { email: true, sms: false, push: true, frequency: 'daily' },
    },
  },
  {
    id: 'delivery-status',
    name: 'Delivery Status',
    category: 'messages',
    description: 'Message delivery tracking',
    userProvides: 'Message send status',
    aiSees: 'Whether messages were delivered',
    resource: {
      id: 'delivery_status',
      uri: 'status://messages/{messageId}',
      name: 'delivery_status',
      description: 'Get message delivery status',
      category: 'messages',
      mimeType: 'application/json',
      isTemplate: true,
      uriVariables: [
        { name: 'messageId', type: 'string', description: 'Message identifier', required: true },
      ],
      exampleData: { sent: true, delivered: true, read: false, timestamp: '2025-10-05T10:00:00Z' },
    },
  },
  {
    id: 'webhook-endpoints',
    name: 'Webhook Endpoints',
    category: 'messages',
    description: 'Registered webhook URLs',
    userProvides: 'Active webhook configurations',
    aiSees: 'Where to send webhook events',
    resource: {
      id: 'webhook_endpoints',
      uri: 'endpoints://webhooks/list',
      name: 'webhook_endpoints',
      description: 'List of webhook endpoints',
      category: 'messages',
      mimeType: 'application/json',
      isTemplate: false,
      exampleData: [
        { id: 'webhook_1', url: 'https://api.example.com/webhook', events: ['user.created'] },
      ],
    },
  },
  {
    id: 'email-queue',
    name: 'Email Queue',
    category: 'messages',
    description: 'Pending email messages',
    userProvides: 'Emails waiting to send',
    aiSees: 'Queued outbound emails',
    resource: {
      id: 'email_queue',
      uri: 'queue://email/pending',
      name: 'email_queue',
      description: 'Pending email queue',
      category: 'messages',
      mimeType: 'application/json',
      isTemplate: false,
      exampleData: [
        { id: 'email_1', to: 'user@example.com', subject: 'Welcome', queuedAt: '2025-10-05T10:00:00Z' },
      ],
    },
  },
  {
    id: 'slack-channels',
    name: 'Slack Channels',
    category: 'messages',
    description: 'Available Slack channels',
    userProvides: 'Slack workspace channels',
    aiSees: 'Where to post messages',
    resource: {
      id: 'slack_channels',
      uri: 'channels://slack/list',
      name: 'slack_channels',
      description: 'List of Slack channels',
      category: 'messages',
      mimeType: 'application/json',
      isTemplate: false,
      exampleData: [
        { id: 'C123', name: 'general', memberCount: 45 },
        { id: 'C456', name: 'engineering', memberCount: 12 },
      ],
    },
  },

  // üîê Security & Access (6 templates)
  {
    id: 'auth-config',
    name: 'Auth Configuration',
    category: 'security',
    description: 'Authentication settings',
    userProvides: 'Auth provider configuration',
    aiSees: 'How authentication works',
    resource: {
      id: 'auth_config',
      uri: 'config://auth/current',
      name: 'auth_config',
      description: 'Current auth configuration',
      category: 'security',
      mimeType: 'application/json',
      isTemplate: false,
      exampleData: {
        provider: 'jwt',
        tokenExpiry: '7d',
        twoFactorEnabled: true,
        passwordPolicy: { minLength: 8, requireSpecialChar: true },
      },
    },
  },
  {
    id: 'user-permissions',
    name: 'User Permissions',
    category: 'security',
    description: 'User access rights',
    userProvides: 'Permission lists per user',
    aiSees: 'What user can access',
    resource: {
      id: 'user_permissions',
      uri: 'permissions://users/{userId}',
      name: 'user_permissions',
      description: 'Get user permissions',
      category: 'security',
      mimeType: 'application/json',
      isTemplate: true,
      uriVariables: [
        { name: 'userId', type: 'string', description: 'User identifier', required: true },
      ],
      exampleData: { roles: ['admin', 'editor'], permissions: ['read', 'write', 'delete'] },
    },
  },
  {
    id: 'role-definitions',
    name: 'Role Definitions',
    category: 'security',
    description: 'Available user roles',
    userProvides: 'Role names and permissions',
    aiSees: 'System roles and their access',
    resource: {
      id: 'role_definitions',
      uri: 'roles://security/definitions',
      name: 'role_definitions',
      description: 'Role definitions',
      category: 'security',
      mimeType: 'application/json',
      isTemplate: false,
      exampleData: {
        admin: { permissions: ['*'], description: 'Full system access' },
        editor: { permissions: ['read', 'write'], description: 'Content editing' },
      },
    },
  },
  {
    id: 'session-info',
    name: 'Session Information',
    category: 'security',
    description: 'Active session details',
    userProvides: 'Current session data',
    aiSees: 'Session status and expiry',
    resource: {
      id: 'session_info',
      uri: 'sessions://security/{sessionId}',
      name: 'session_info',
      description: 'Get session info',
      category: 'security',
      mimeType: 'application/json',
      isTemplate: true,
      uriVariables: [
        { name: 'sessionId', type: 'string', description: 'Session identifier', required: true },
      ],
      exampleData: { userId: 'user_123', createdAt: '2025-10-05T10:00:00Z', expiresAt: '2025-10-12T10:00:00Z' },
    },
  },
  {
    id: 'api-keys',
    name: 'API Keys',
    category: 'security',
    description: 'Active API keys',
    userProvides: 'API key list and permissions',
    aiSees: 'Available API keys',
    resource: {
      id: 'api_keys',
      uri: 'keys://api/list',
      name: 'api_keys',
      description: 'List of API keys',
      category: 'security',
      mimeType: 'application/json',
      isTemplate: false,
      exampleData: [
        { id: 'key_1', name: 'Production Key', permissions: ['read'], lastUsed: '2025-10-05T09:00:00Z' },
      ],
    },
  },
  {
    id: 'security-logs',
    name: 'Security Logs',
    category: 'security',
    description: 'Security event logs',
    userProvides: 'Auth events and violations',
    aiSees: 'Security incidents',
    resource: {
      id: 'security_logs',
      uri: 'logs://security/recent',
      name: 'security_logs',
      description: 'Recent security logs',
      category: 'security',
      mimeType: 'application/json',
      isTemplate: false,
      exampleData: [
        { event: 'login_failed', userId: 'user_123', timestamp: '2025-10-05T10:00:00Z', ip: '192.168.1.1' },
      ],
    },
  },

  // üí∞ Money & Payments (6 templates)
  {
    id: 'pricing-tables',
    name: 'Pricing Tables',
    category: 'payments',
    description: 'Product pricing by plan',
    userProvides: 'Price lists and tiers',
    aiSees: 'Available pricing options',
    resource: {
      id: 'pricing_tables',
      uri: 'pricing://plans/{planId}',
      name: 'pricing_tables',
      description: 'Get pricing for plan',
      category: 'payments',
      mimeType: 'application/json',
      isTemplate: true,
      uriVariables: [
        { name: 'planId', type: 'string', description: 'Plan identifier', required: true },
      ],
      exampleData: { monthly: 29.99, yearly: 299.99, currency: 'USD', features: ['Feature 1', 'Feature 2'] },
    },
  },
  {
    id: 'invoice-templates',
    name: 'Invoice Templates',
    category: 'payments',
    description: 'Invoice layout templates',
    userProvides: 'Invoice HTML/PDF templates',
    aiSees: 'How to format invoices',
    resource: {
      id: 'invoice_templates',
      uri: 'templates://invoices/{type}',
      name: 'invoice_templates',
      description: 'Get invoice template',
      category: 'payments',
      mimeType: 'text/html',
      isTemplate: true,
      uriVariables: [
        { name: 'type', type: 'string', description: 'Invoice type', required: true },
      ],
      exampleData: '<html><body><h1>Invoice</h1><p>Total: {{total}}</p></body></html>',
    },
  },
  {
    id: 'payment-methods',
    name: 'Payment Methods',
    category: 'payments',
    description: 'User payment methods',
    userProvides: 'Saved cards and payment info',
    aiSees: 'Available payment options',
    resource: {
      id: 'payment_methods',
      uri: 'methods://payments/{userId}',
      name: 'payment_methods',
      description: 'Get payment methods for user',
      category: 'payments',
      mimeType: 'application/json',
      isTemplate: true,
      uriVariables: [
        { name: 'userId', type: 'string', description: 'User identifier', required: true },
      ],
      exampleData: [
        { id: 'pm_1', type: 'card', last4: '4242', brand: 'visa', default: true },
      ],
    },
  },
  {
    id: 'transaction-history',
    name: 'Transaction History',
    category: 'payments',
    description: 'Payment transaction log',
    userProvides: 'Past transactions',
    aiSees: 'Payment history',
    resource: {
      id: 'transaction_history',
      uri: 'history://payments/transactions',
      name: 'transaction_history',
      description: 'Transaction history',
      category: 'payments',
      mimeType: 'application/json',
      isTemplate: false,
      exampleData: [
        { id: 'txn_1', amount: 99.99, status: 'paid', date: '2025-10-05T10:00:00Z' },
      ],
    },
  },
  {
    id: 'coupon-codes',
    name: 'Coupon Codes',
    category: 'payments',
    description: 'Active discount codes',
    userProvides: 'Valid coupon codes',
    aiSees: 'Available discounts',
    resource: {
      id: 'coupon_codes',
      uri: 'coupons://payments/active',
      name: 'coupon_codes',
      description: 'Active coupon codes',
      category: 'payments',
      mimeType: 'application/json',
      isTemplate: false,
      exampleData: [
        { code: 'SAVE10', discount: 10, type: 'percentage', expiresAt: '2025-12-31T23:59:59Z' },
      ],
    },
  },
  {
    id: 'subscription-plans',
    name: 'Subscription Plans',
    category: 'payments',
    description: 'Available subscription tiers',
    userProvides: 'Plan details and features',
    aiSees: 'Subscription options',
    resource: {
      id: 'subscription_plans',
      uri: 'plans://subscriptions/list',
      name: 'subscription_plans',
      description: 'List of subscription plans',
      category: 'payments',
      mimeType: 'application/json',
      isTemplate: false,
      exampleData: [
        { id: 'plan_pro', name: 'Pro', price: 29.99, interval: 'month', features: ['Feature 1'] },
      ],
    },
  },

  // üìÅ Files & Media (6 templates)
  {
    id: 'file-metadata',
    name: 'File Metadata',
    category: 'files',
    description: 'File information by ID',
    userProvides: 'File details and properties',
    aiSees: 'File name, size, type, dates',
    resource: {
      id: 'file_metadata',
      uri: 'metadata://files/{fileId}',
      name: 'file_metadata',
      description: 'Get file metadata',
      category: 'files',
      mimeType: 'application/json',
      isTemplate: true,
      uriVariables: [
        { name: 'fileId', type: 'string', description: 'File identifier', required: true },
      ],
      exampleData: { id: 'file_123', name: 'document.pdf', size: 1024000, mimeType: 'application/pdf' },
    },
  },
  {
    id: 'storage-locations',
    name: 'Storage Locations',
    category: 'files',
    description: 'Available storage endpoints',
    userProvides: 'Storage buckets and paths',
    aiSees: 'Where files are stored',
    resource: {
      id: 'storage_locations',
      uri: 'locations://storage/available',
      name: 'storage_locations',
      description: 'Available storage locations',
      category: 'files',
      mimeType: 'application/json',
      isTemplate: false,
      exampleData: [
        { id: 'bucket_1', name: 'Primary Storage', url: 's3://bucket1', capacity: 1000000000 },
      ],
    },
  },
  {
    id: 'mime-types',
    name: 'MIME Types',
    category: 'files',
    description: 'Supported file types',
    userProvides: 'Accepted MIME types',
    aiSees: 'What file formats are allowed',
    resource: {
      id: 'mime_types',
      uri: 'types://files/supported',
      name: 'mime_types',
      description: 'Supported MIME types',
      category: 'files',
      mimeType: 'application/json',
      isTemplate: false,
      exampleData: {
        images: ['image/jpeg', 'image/png', 'image/gif'],
        documents: ['application/pdf', 'application/msword'],
      },
    },
  },
  {
    id: 'file-tree',
    name: 'File Tree',
    category: 'files',
    description: 'Folder structure',
    userProvides: 'Directory hierarchy',
    aiSees: 'File organization',
    resource: {
      id: 'file_tree',
      uri: 'tree://files/{path}',
      name: 'file_tree',
      description: 'Get file tree for path',
      category: 'files',
      mimeType: 'application/json',
      isTemplate: true,
      uriVariables: [
        { name: 'path', type: 'string', description: 'Folder path', required: true },
      ],
      exampleData: {
        folders: ['documents', 'images'],
        files: [{ id: 'file_1', name: 'document.pdf' }],
      },
    },
  },
  {
    id: 'upload-limits',
    name: 'Upload Limits',
    category: 'files',
    description: 'File upload restrictions',
    userProvides: 'Max size and count limits',
    aiSees: 'Upload constraints',
    resource: {
      id: 'upload_limits',
      uri: 'limits://files/upload',
      name: 'upload_limits',
      description: 'File upload limits',
      category: 'files',
      mimeType: 'application/json',
      isTemplate: false,
      exampleData: { maxSize: 10485760, maxCount: 10, allowedTypes: ['image/*', 'application/pdf'] },
    },
  },
  {
    id: 'recent-uploads',
    name: 'Recent Uploads',
    category: 'files',
    description: 'Recently uploaded files',
    userProvides: 'Upload history',
    aiSees: 'What was uploaded recently',
    resource: {
      id: 'recent_uploads',
      uri: 'history://files/uploads',
      name: 'recent_uploads',
      description: 'Recent file uploads',
      category: 'files',
      mimeType: 'application/json',
      isTemplate: false,
      exampleData: [
        { id: 'file_1', name: 'image.jpg', uploadedAt: '2025-10-05T10:00:00Z', size: 204800 },
      ],
    },
  },

  // üåê External Services (6 templates)
  {
    id: 'api-schemas',
    name: 'API Schemas',
    category: 'external',
    description: 'External API documentation',
    userProvides: 'API endpoint schemas',
    aiSees: 'How to call external APIs',
    resource: {
      id: 'api_schemas',
      uri: 'schemas://api/{service}',
      name: 'api_schemas',
      description: 'Get API schema for service',
      category: 'external',
      mimeType: 'application/json',
      isTemplate: true,
      uriVariables: [
        { name: 'service', type: 'string', description: 'Service name', required: true },
      ],
      exampleData: {
        baseUrl: 'https://api.example.com',
        endpoints: [{ path: '/users', method: 'GET', params: ['id'] }],
      },
    },
  },
  {
    id: 'service-status',
    name: 'Service Status',
    category: 'external',
    description: 'External service health',
    userProvides: 'API uptime and latency',
    aiSees: 'Service availability',
    resource: {
      id: 'service_status',
      uri: 'status://services/{serviceName}',
      name: 'service_status',
      description: 'Get service status',
      category: 'external',
      mimeType: 'application/json',
      isTemplate: true,
      uriVariables: [
        { name: 'serviceName', type: 'string', description: 'Service name', required: true },
      ],
      exampleData: { status: 'operational', uptime: '99.9%', latency: 45 },
    },
  },
  {
    id: 'api-credentials',
    name: 'API Credentials',
    category: 'external',
    description: 'External API keys',
    userProvides: 'Stored API credentials',
    aiSees: 'Authentication for external services',
    resource: {
      id: 'api_credentials',
      uri: 'credentials://api/{service}',
      name: 'api_credentials',
      description: 'Get credentials for service',
      category: 'external',
      mimeType: 'application/json',
      isTemplate: true,
      uriVariables: [
        { name: 'service', type: 'string', description: 'Service name', required: true },
      ],
      exampleData: { apiKey: 'sk_live_***', environment: 'production' },
    },
  },
  {
    id: 'webhook-logs',
    name: 'Webhook Logs',
    category: 'external',
    description: 'Incoming webhook history',
    userProvides: 'Received webhook data',
    aiSees: 'External events received',
    resource: {
      id: 'webhook_logs',
      uri: 'logs://webhooks/incoming',
      name: 'webhook_logs',
      description: 'Incoming webhook logs',
      category: 'external',
      mimeType: 'application/json',
      isTemplate: false,
      exampleData: [
        { id: 'wh_1', source: 'stripe', event: 'payment.succeeded', receivedAt: '2025-10-05T10:00:00Z' },
      ],
    },
  },
  {
    id: 'rate-limits',
    name: 'Rate Limits',
    category: 'external',
    description: 'API rate limit status',
    userProvides: 'Request quota and usage',
    aiSees: 'How many requests remain',
    resource: {
      id: 'rate_limits',
      uri: 'limits://api/{service}',
      name: 'rate_limits',
      description: 'Get rate limits for service',
      category: 'external',
      mimeType: 'application/json',
      isTemplate: true,
      uriVariables: [
        { name: 'service', type: 'string', description: 'Service name', required: true },
      ],
      exampleData: { limit: 1000, remaining: 845, resetAt: '2025-10-05T11:00:00Z' },
    },
  },
  {
    id: 'integration-config',
    name: 'Integration Config',
    category: 'external',
    description: 'Third-party integrations',
    userProvides: 'Active integration settings',
    aiSees: 'Connected services',
    resource: {
      id: 'integration_config',
      uri: 'config://integrations/list',
      name: 'integration_config',
      description: 'List of integrations',
      category: 'external',
      mimeType: 'application/json',
      isTemplate: false,
      exampleData: [
        { service: 'stripe', enabled: true, webhookUrl: 'https://app.example.com/webhook' },
      ],
    },
  },
];

export const getCategorizedResources = () => {
  const categories: Record<string, ResourceTemplate[]> = {};

  resourceTemplates.forEach((template) => {
    if (!categories[template.category]) {
      categories[template.category] = [];
    }
    categories[template.category].push(template);
  });

  return categories;
};
