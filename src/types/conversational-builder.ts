import { UIResource, ActionMapping, CustomTool } from './ui-builder';

/**
 * Phase of the conversational UI building process
 */
export type ConversationPhase =
  | 'discovery'    // Understanding UI requirements and user needs
  | 'design'       // Generating HTML and UI components
  | 'actions'      // Mapping interactive elements to tools
  | 'refinement'   // User-requested changes and improvements
  | 'deployment';  // Ready to deploy and test

/**
 * Detected UI intent from conversation
 */
export interface UserIntent {
  type: 'form' | 'dashboard' | 'table' | 'chart' | 'gallery' | 'custom';
  description: string;
  confidence: number;
}

/**
 * Extracted UI elements and requirements from user input
 */
export interface DetectedEntity {
  type: 'ui_component' | 'form_field' | 'layout_pattern' | 'styling_preference' | 'data_source';
  value: string;
  context?: string;
}

/**
 * Required UI capabilities inferred from conversation
 */
export interface Capability {
  id: string;
  name: string;
  type: 'interactive' | 'display_only' | 'agent_context' | 'tool_actions' | 'custom';
  implemented: boolean;
  suggestions?: string[];
}

/**
 * Context passed to AI for generating UI components
 */
export interface ConversationalContext {
  userIntent?: UserIntent;
  detectedEntities: DetectedEntity[];
  requiredCapabilities: Capability[];
  currentUI: UIResource;
  actionMappings: ActionMapping[];
  conversationHistory: ConversationMessage[];
}

/**
 * Message in the conversation
 */
export interface ConversationMessage {
  id: string;
  role: 'user' | 'assistant';
  content: string;
  timestamp: Date;
  metadata?: {
    phase?: ConversationPhase;
    generatedHTML?: boolean;
    addedPlaceholders?: string[];
    addedActions?: string[];
    questions?: ClarificationQuestion[]; // Questions embedded in assistant messages
  };
}

/**
 * Clarifying question generated by AI
 */
export interface ClarificationQuestion {
  id: string;
  question: string;
  category: 'ui_type' | 'layout' | 'styling' | 'interactions' | 'data_binding' | 'agent_context';
  suggestedAnswers?: string[];
  required: boolean;
}

/**
 * AI-generated suggestion for improving the UI
 */
export interface BuilderSuggestion {
  id: string;
  type: 'ui_component' | 'action_mapping' | 'placeholder' | 'styling' | 'layout';
  title: string;
  description: string;
  confidence: number;
  actionLabel: string;
  action?: () => void; // Optional - handled by parent component
}

/**
 * UI configuration snapshot at a point in the conversation
 */
export interface ConfigSnapshot {
  id: string;
  timestamp: Date;
  phase: ConversationPhase;
  uiResource: UIResource;
  actionMappings: ActionMapping[];
  customTools: CustomTool[];
}

/**
 * Complete state of the conversational UI builder
 */
export interface ConversationState {
  // Conversation tracking
  messages: ConversationMessage[];
  currentPhase: ConversationPhase;

  // AI analysis
  intent?: UserIntent;
  entities: DetectedEntity[];
  capabilities: Capability[];
  pendingQuestions: ClarificationQuestion[];
  suggestions: BuilderSuggestion[];

  // Generated UI configuration
  uiResource: UIResource;
  actionMappings: ActionMapping[];
  customTools: CustomTool[];

  // History and undo
  snapshots: ConfigSnapshot[];
  currentSnapshotIndex: number;

  // Deployment
  isDeploying: boolean;
  deployedServerName?: string;
  deploymentError?: string;
}

/**
 * Request to the conversational builder API
 */
export interface ConversationRequest {
  message: string;
  context: ConversationalContext;
  userId: string;
}

/**
 * Response from the conversational UI builder API
 */
export interface ConversationResponse {
  message: string;
  phase: ConversationPhase;
  intent?: UserIntent;
  entities?: DetectedEntity[];
  capabilities?: Capability[];
  questions?: ClarificationQuestion[];
  suggestions?: BuilderSuggestion[];
  updatedUI?: UIResource;
  actionMappings?: ActionMapping[];
}

/**
 * UI template matching result
 */
export interface TemplateMatch {
  templateId: string;
  templateName: string;
  type: 'ui_component';
  confidence: number;
  reason: string;
}
