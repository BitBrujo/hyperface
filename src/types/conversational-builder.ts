import { ServerConfig, ToolDefinition, ResourceDefinition } from './server-builder';
import { UIResource, ActionMapping, CustomTool } from './ui-builder';

/**
 * Phase of the conversational building process
 */
export type ConversationPhase =
  | 'discovery'    // Understanding user intent and asking clarifying questions
  | 'drafting'     // Generating initial tool and resource schemas
  | 'ui_design'    // Suggesting and creating MCP-UI components
  | 'refinement'   // User-requested changes and improvements
  | 'deployment';  // Ready to deploy and test

/**
 * Detected user intent from conversation
 */
export interface UserIntent {
  type: 'database' | 'api' | 'file_system' | 'notification' | 'custom';
  description: string;
  confidence: number;
}

/**
 * Extracted entities from user input
 */
export interface DetectedEntity {
  type: 'technology' | 'data_type' | 'capability' | 'requirement';
  value: string;
  context?: string;
}

/**
 * Required capabilities inferred from conversation
 */
export interface Capability {
  id: string;
  name: string;
  type: 'CRUD' | 'authentication' | 'real_time' | 'file_upload' | 'search' | 'custom';
  implemented: boolean;
  suggestions?: string[];
}

/**
 * Context passed to AI for generating configurations
 */
export interface ConversationalContext {
  userIntent?: UserIntent;
  detectedEntities: DetectedEntity[];
  requiredCapabilities: Capability[];
  currentConfig: ServerConfig;
  currentUI?: UIResource;
  conversationHistory: ConversationMessage[];
}

/**
 * Message in the conversation
 */
export interface ConversationMessage {
  id: string;
  role: 'user' | 'assistant';
  content: string;
  timestamp: Date;
  metadata?: {
    phase?: ConversationPhase;
    generatedTools?: string[];
    generatedResources?: string[];
    generatedUI?: boolean;
  };
}

/**
 * Clarifying question generated by AI
 */
export interface ClarificationQuestion {
  id: string;
  question: string;
  category: 'authentication' | 'data_structure' | 'capabilities' | 'ui_preferences' | 'deployment';
  suggestedAnswers?: string[];
  required: boolean;
}

/**
 * AI-generated suggestion for improving the server
 */
export interface BuilderSuggestion {
  id: string;
  type: 'tool' | 'resource' | 'ui_component' | 'action_mapping' | 'authentication';
  title: string;
  description: string;
  confidence: number;
  actionLabel: string;
  action: () => void;
}

/**
 * Configuration snapshot at a point in the conversation
 */
export interface ConfigSnapshot {
  id: string;
  timestamp: Date;
  phase: ConversationPhase;
  serverConfig: ServerConfig;
  uiResource?: UIResource;
  actionMappings?: ActionMapping[];
  customTools?: CustomTool[];
}

/**
 * Complete state of the conversational builder
 */
export interface ConversationState {
  // Conversation tracking
  messages: ConversationMessage[];
  currentPhase: ConversationPhase;

  // AI analysis
  intent?: UserIntent;
  entities: DetectedEntity[];
  capabilities: Capability[];
  pendingQuestions: ClarificationQuestion[];
  suggestions: BuilderSuggestion[];

  // Generated configuration
  serverConfig: ServerConfig;
  uiResource?: UIResource;
  actionMappings: ActionMapping[];
  customTools: CustomTool[];

  // History and undo
  snapshots: ConfigSnapshot[];
  currentSnapshotIndex: number;

  // Deployment
  isDeploying: boolean;
  deployedServerName?: string;
  deploymentError?: string;
}

/**
 * Request to the conversational builder API
 */
export interface ConversationRequest {
  message: string;
  context: ConversationalContext;
  userId: string;
}

/**
 * Response from the conversational builder API
 */
export interface ConversationResponse {
  message: string;
  phase: ConversationPhase;
  intent?: UserIntent;
  entities?: DetectedEntity[];
  capabilities?: Capability[];
  questions?: ClarificationQuestion[];
  suggestions?: BuilderSuggestion[];
  updatedConfig?: ServerConfig;
  updatedUI?: UIResource;
  actionMappings?: ActionMapping[];
}

/**
 * Template matching result
 */
export interface TemplateMatch {
  templateId: string;
  templateName: string;
  type: 'tool' | 'resource';
  confidence: number;
  reason: string;
}
